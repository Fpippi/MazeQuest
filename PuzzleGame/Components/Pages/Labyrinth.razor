@using MazeGame.Services
@inject MazeGame.Services.GridState GridState
@using static MazeGame.Services.Difficulty
@rendermode InteractiveServer

@if (Difficulty != MazeGame.Services.Difficulty.None)
{
    <div class="controls">
        <div class="grid">
            @for (int i = 0; i < GridState.Grid.GetLength(0); i++)
            {
                <div class="row">
                    @for (int j = 0; j < GridState.Grid.GetLength(1); j++)
                    {
                        <div class="cell @(GridState.Grid[i, j] == 1 ? "wall" : "path") @(i == PlayerX && j == PlayerY ? "player" : "")">
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}


@code {

    [Parameter] public required int[,] Grid { get; set; } 
    [Parameter] public required int PlayerX { get; set; }
    [Parameter] public required int PlayerY { get; set; }
    [Parameter] public required MazeGame.Services.Difficulty Difficulty { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        if (Difficulty != MazeGame.Services.Difficulty.None)
        {
            Grid = GridState.RandomGrid(Difficulty);
        }
    }
}