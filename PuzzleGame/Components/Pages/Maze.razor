@page "/maze"
@rendermode InteractiveServer
<h3>Maze</h3>

<div class="controls">
    <div class="grid">
        @for (int i = 0; i < grid.GetLength(0); i++)
        {
            <div class="row">
                @for (int j = 0; j < grid.GetLength(1); j++)
                {
                    <div class="cell @(grid[i, j] == 1 ? "wall" : "path") @(i == playerX && j == playerY ? "player" : "")">
                    </div>
                }
            </div>
        }
    </div>
</div>

@if (hasWon)
{
    <div class="victory-message controls">
        Hai vinto!
    </div>
    <button class="controls" @onclick="ResetGame">Reset</button>
}
else
{
    <div class="controls">
        <div style="display: flex; justify-content: center;">
            <button class="control-button" style="order: 1;" @onclick="MoveUp">⬆️</button>
        </div>
        <div style="display: flex; justify-content: space-between;">
            <button class="control-button" style="order: 2;" @onclick="MoveLeft">⬅️</button>
            <button class="control-button" style="order: 3;" @onclick="MoveRight">➡️</button>
        </div>
        <div style="display: flex; justify-content: center;">
            <button class="control-button" style="order: 4;" @onclick="MoveDown">⬇️</button>
        </div>
    </div>
}

<style>
    .control-button {
        width: 40px;
        height: 40px;
        font-size: 1.5em;
        border: none;
        background-color: #F5F5F5;
        color: #4A3F2D;
        cursor: pointer;
    }

    .controls {
        margin-top: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .grid {
        display: grid;
        grid-template-rows: repeat(6, 30px);
        grid-template-columns: repeat(6, 30px);
    }

    .row {
        display: contents;
    }

    .cell {
        width: 30px;
        height: 30px;
        border: 1px solid black;
        box-sizing: border-box;
    }

    .wall {
        background-color: greenyellow;
    }

    .path {
        background-color: sandybrown;
    }

    .player {
        background-color: #4A3F2D;
        border: 3px solid #D4AF37;
        border-radius: 15px;
        padding: 15px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.6);
        z-index: 1;
        font-family: 'Cinzel', serif;
        color: #F5F5F5;
        text-align: center;
        position: relative;
    }

    .player::before {
        content: "🛡️";
        font-size: 2em;
        position: absolute;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
    }

    .player::after {
        content: "👑";
        font-size: 1.5em;
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
    }

    .victory-message {
        margin-top: 20px;
        font-size: 1.5em;
        color: green;
    }
</style>

@code {
    private int[,] grid = new int[,]
    {
        { 1, 1, 1, 1, 1, 1 },
        { 1, 0, 0, 0, 0, 1 },
        { 1, 0, 1, 1, 0, 1 },
        { 1, 0, 1, 0, 0, 1 },
        { 1, 0, 0, 0, 1, 1 },
        { 1, 1, 1, 0, 1, 1 }
    };

    private int playerX = 1;
    private int playerY = 1;
    private bool hasWon = false;

    private void MoveUp()
    {
        if (playerX > 0 && grid[playerX - 1, playerY] == 0)
        {
            playerX--;
            CheckVictory();
        }
    }

    private void MoveDown()
    {
        if (playerX < grid.GetLength(0) - 1 && grid[playerX + 1, playerY] == 0)
        {
            playerX++;
            CheckVictory();
        }
    }

    private void MoveLeft()
    {
        if (playerY > 0 && grid[playerX, playerY - 1] == 0)
        {
            playerY--;
            CheckVictory();
        }
    }

    private void MoveRight()
    {
        if (playerY < grid.GetLength(1) - 1 && grid[playerX, playerY + 1] == 0)
        {
            playerY++;
            CheckVictory();
        }
    }

    private void CheckVictory()
    {
        if (IsVictory())
        {
            hasWon = true;
        }
    }

    private void ResetGame()
    {
        playerX = 1;
        playerY = 1;
        hasWon = false;
    }

    private bool IsVictory() => playerX == 5 || playerY == 5;
}
